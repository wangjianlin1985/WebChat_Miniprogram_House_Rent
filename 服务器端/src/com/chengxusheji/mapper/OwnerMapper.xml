<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.OwnerMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加民宿主人记录 -->
	<insert id="addOwner" parameterType="owner">
		insert into t_owner(ownerUserName,password,name,gender,birthDate,ownerPhoto,telephone,address,regTime,shzt) values 
		(#{ownerUserName},#{password},#{name},#{gender},#{birthDate},#{ownerPhoto},#{telephone},#{address},#{regTime},#{shzt})
	</insert>

	<!-- 按照查询条件分页查询民宿主人记录 -->
	<select id="queryOwner" resultMap="ownerMap" >
		select t_owner.* from t_owner ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="ownerMap" type="owner">
        <id property="ownerUserName" column="ownerUserName" />
    </resultMap>

    <!-- 按照查询条件查询所有民宿主人记录 -->
	<select id="queryOwnerList" resultMap="ownerMap" >
		select t_owner.* from t_owner ${where}
	</select>

    <!-- 按照查询条件的民宿主人记录数 -->
	<select id="queryOwnerCount" resultType="int">
		select count(*) from t_owner ${where}
	</select>

	<!-- 根据主键查询某个民宿主人记录 -->
	<select id="getOwner" parameterType="string" resultMap="ownerMap">
		select * from t_owner where t_owner.ownerUserName = #{ownerUserName}
	</select>

	<!-- 更新民宿主人记录 -->
	<update id="updateOwner" parameterType="owner">
		update t_owner set password=#{password},name=#{name},gender=#{gender},birthDate=#{birthDate},ownerPhoto=#{ownerPhoto},telephone=#{telephone},address=#{address},regTime=#{regTime},shzt=#{shzt} where ownerUserName = #{ownerUserName}
	</update>

	<!-- 删除民宿主人记录 -->
	<delete id="deleteOwner" parameterType="string">
		delete from t_owner where ownerUserName=#{ownerUserName}
	</delete>

</mapper>
